RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   /home/users/level06/level06

Canary found, we will not be able to exec code on the stack..

level06@OverRide:~$ ./level06 
***********************************
*		level06		  *
***********************************
-> Enter Login: ABCDEF
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: A
level06@OverRide:~$ 

We have a auth service, we will need a way to find the right login/serial


 8048956:	c7 04 24 61 8b 04 08 	movl   $0x8048b61,(%esp)    # x/s 0x8048b61 : "/bin/sh" --> We can see that the program open a shell if we have the good login/serial
 804895d:	e8 3e fc ff ff       	call   80485a0 <system@plt>

 80488e7:	e8 64 fc ff ff       	call   8048550 <fgets@plt> --> Here the program take the login input
 [...]
 804892d:	e8 ae fc ff ff       	call   80485e0 <__isoc99_scanf@plt> --> Here the program take the serial input, an unsigned int
 [...]
 8048941:	e8 02 fe ff ff       	call   8048748 <auth> --> Here we call the auth function with our input. It need to return 0 to open our shell


 8048786:	83 7d f4 05          	cmpl   $0x5,-0xc(%ebp) --> Check if our login is at least 6 char long
 804878a:	7f 0a                	jg     8048796 <auth+0x4e>
 804878c:	b8 01 00 00 00       	mov    $0x1,%eax --> If not, the auth will return 1 and no shell will be open
 8048791:	e9 e1 00 00 00       	jmp    8048877 <auth+0x12f> --> The return of auth function
 
 80487b5:	e8 36 fe ff ff       	call   80485f0 <ptrace@plt> 
 80487ba:	83 f8 ff             	cmp    $0xffffffff,%eax --> Here we check if the program is already traced (gdb, ltrace, etc..), if yes return 1 aswell

Then, the auth func proceed to create a hash from our login
 8048866:	3b 45 f0             	cmp    -0x10(%ebp),%eax --> And here it compare the created hash with our second input (serial)
 
So this is pretty easy, we need to run the program one time with a login, avoid the ptrace return by jumping over it, then print our hash.
Then we just have to launch the program without gdb, use the same login and use the hash we found in the serial field !

(gdb) b *0x080487bd --> before the ptrace return
Breakpoint 1 at 0x80487bd
(gdb) b *0x08048866 --> the comparaison between the hash and our serial input
Breakpoint 2 at 0x8048866
(gdb) r
Starting program: /home/users/level06/level06 
***********************************
*		level06		  *
***********************************
-> Enter Login: ABCDEF              --> We will need to use the same login when we launch it again
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: 1                  --> We don't care for now

Breakpoint 1, 0x080487bd in auth ()
(gdb) jump *0x80487ed --> We perform the same jump as the program do if it is not traced
Continuing at 0x80487ed.

Breakpoint 2, 0x08048866 in auth () --> the cmp
(gdb) x $ebp-0x10 --> our hash address
0xffffd5a8:	0x005f1602 --> our hash

>>> 0x005f1602
6231554 --> the int representation of our hash


level06@OverRide:~$ ./level06 
***********************************
*		level06		  *
***********************************
-> Enter Login: ABCDEF
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: 6231554
Authenticated!
$ whoami
level07
$ cat /home/users/level07/.pass
GbcPDRgsFK77LNnnuh7QyFYA2942Gp8yKj9KrWD8 --> BINGO

